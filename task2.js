//Ответ
// 1) 1 - потому что это в основном стеке
// 2) 7 - потому что это в основном стеке
// 3) 3 - потому что это первый микротаск
// 4) 5 - потому что это третий микротаск, но выводит значение раньше второго потому что во втором setTimeout(() => console.log(4)));
// 5) 2 - первый callback потому что у него нет timeout'a и потому что его он идёт первый в коде
// 6) 6 - трейтий callback, но вызывается раньше 4, потому что 4ке нужно пройти через очередь микротасков, а затем через очередь callback'oв
// 7) 4 - последний потому что 4ке нужно пройти через очередь микротасков, а затем через очередь callback'oв

console.log(1);
setTimeout(() => console.log(2));
Promise.resolve().then(() => console.log(3));
Promise.resolve().then(() => setTimeout(() => console.log(4)));
Promise.resolve().then(() => console.log(5));
setTimeout(() => console.log(6));
console.log(7);

//Первая (неправильная) попытка
// 1) 1 - потому что это в основном стеке
// 2) 7 - потому что это в основном стеке
// 3) 3 - потому что это первый микротаск
// 4) 5 - потому что это третий микротаск, но выводит значение раньше второго потому что во втором setTimeout(() => console.log(4)));
// 5) 4 - первый callback потому что он объявлен в микротаске
// 6) 2 - потому что вызывается раньше 6
// 7) 6 - потому что вызывается последним
